/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class MgFindImageCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgFindImageCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MgFindImageCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgFindImageCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgFindImageCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void onFindImage(int sid, string name) {
    touchvgPINVOKE.MgFindImageCallback_onFindImage(swigCPtr, sid, name);
  }

  public MgFindImageCallback() : this(touchvgPINVOKE.new_MgFindImageCallback(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onFindImage", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMgFindImageCallback_0(SwigDirectoronFindImage);
    touchvgPINVOKE.MgFindImageCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MgFindImageCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectoronFindImage(int sid, string name) {
    onFindImage(sid, name);
  }

  public delegate void SwigDelegateMgFindImageCallback_0(int sid, string name);

  private SwigDelegateMgFindImageCallback_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(int), typeof(string) };
}

}
